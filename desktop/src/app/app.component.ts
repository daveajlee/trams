import { Component } from '@angular/core';
import {Router} from '@angular/router';
import {DatePipe} from '@angular/common';
import {GameService} from "./shared/game.service";
import {Game} from "./game/game.model";
import {Scenario} from "./shared/scenario.model";

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers: [DatePipe]
})
export class AppComponent {

  file: File | null = null;
  title = 'trams-frontend';
  companyName: string;
  playerName: string;
  difficultyLevel: string;
  startingDate: string;
  showOutlet: boolean;
  currentDate = new Date();

  gameService: GameService;

  constructor(public router: Router, private datePipe: DatePipe, private gameService2: GameService) {
    this.difficultyLevel = 'Easy';
    this.startingDate = this.datePipe.transform(this.currentDate, 'yyyy-MM-dd');
    this.gameService = gameService2;
  }

  onFileInput(files: FileList | null): void {
    if (files) {
      this.file = files.item(0);
    }
  }
  onActivate(event: any): void {
    this.showOutlet = true;
  }

  onDeactivate(event: any): void {
    this.showOutlet = false;
  }

  /**
   * On submission of the start game form, we create a game.
   */
  onStartSubmit(): void {
    this.router.navigate(['scenariolist'], { queryParams: { company: this.companyName,
        playerName: this.playerName, startingDate: this.startingDate, difficultyLevel: this.difficultyLevel } });
  }

  /**
   * On submission of the load game form, we load the game.
   */
  async onLoadSubmit(): Promise<void> {
    // Currently we only support tcs files.
    if ( this.file.name.endsWith(".tcs") ) {
      console.log('We process this in the tcs file');
      await this.onLoadTcsFile(this.file);
      await this.router.navigate(['management']);
    } else {
      alert('This file type is not supported. Please choose another file.');
    }

  }

  /**
   * Load a tcs file.
   * @param file the file to load.
   */
  async onLoadTcsFile(file: File): Promise<void> {
    var fileContent = await this.readFileContent(file);
    var xmlDoc:XMLDocument;
    if (window.DOMParser) {
      // First of all we read the xml document,
      let parser = new DOMParser();
      xmlDoc = parser.parseFromString(fileContent, "text/xml");
      // Now we read the root game element.
      const gameElement = xmlDoc.documentElement;
      // Now we read the child nodes with the operators.
      const operatorElements = gameElement.childNodes;
      for (var i = 0; i < operatorElements.length; i++) {
        // We can ignore all text nodes. Otherwise it will be an operator.
        if (operatorElements.item(i).nodeName != '#text') {
          // Retrieve the name.
          const operatorName: string = operatorElements.item(i).childNodes.item(0).parentElement.attributes.getNamedItem("name").value
          // Create the scenario.
          const customScenario: Scenario = new Scenario("", "Custom",
              "This is a custom scenario generated by the TCS importer.",
              ["Serve all bus stops.", "Ensure a frequent service on all routes.", "Ensure that passenger satisfaction remains above 70% at all times."],
              70,
              null,
              [],
              []
          );
          // Create the game.
          // Defaults: empty player name, starting time is now, scenario will be created soon and difficulty level is easy.
          this.gameService.setGame(new Game(operatorName, "", this.datePipe.transform(new Date(), 'yyyy-MM-dd'), customScenario, "Easy"))
        }
      }
    }
  }

  /**
   * Read the contents of the file.
   */
  readFileContent(file: File): Promise<string> {
    return new Promise<string>((resolve, reject) => {
      if (!file) {
        resolve('');
      }

      const reader = new FileReader();

      reader.onload = (e) => {
        const text = reader.result.toString();
        resolve(text);

      };

      reader.readAsText(file);
    });
  }

}
